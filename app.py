"""
Interface utilisateur Streamlit pour l'agent LinkedIn automatis√©.
"""
import os
import threading
import time
import pandas as pd
import streamlit as st
from datetime import datetime, timedelta

from linkedin_bot import LinkedInBot
import database as db
import config

# Configuration de la page Streamlit
st.set_page_config(
    page_title="LinkedIn Auto Connector",
    page_icon="üîó",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        font-weight: bold;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .info-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .warning {
        color: #ff4b4b;
    }
    .success {
        color: #00c853;
    }
    .bot-running {
        background-color: #e6f4ea;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #00c853;
    }
    .bot-stopped {
        background-color: #fce8e6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #ff4b4b;
    }
</style>
""", unsafe_allow_html=True)

# Variables de session
if 'bot' not in st.session_state:
    st.session_state.bot = None
if 'bot_thread' not in st.session_state:
    st.session_state.bot_thread = None
if 'is_running' not in st.session_state:
    st.session_state.is_running = False


def start_bot_thread(sector, job_title, location, connection_level, headless_mode):
    """
    D√©marre le bot LinkedIn dans un thread s√©par√©.
    
    Args:
        sector (str): Secteur d'activit√©
        job_title (str): Fonction
        location (str): Localisation
        connection_level (str): Niveau de connexion
        headless_mode (bool): Mode headless
    """
    # Cr√©er une nouvelle instance du bot
    st.session_state.bot = LinkedInBot(headless=headless_mode)
    
    # D√©finir l'√©tat comme en cours d'ex√©cution
    st.session_state.is_running = True
    
    # D√©marrer le bot
    st.session_state.bot.start(
        sector=sector,
        job_title=job_title,
        location=location,
        connection_level=connection_level
    )
    
    # Mettre √† jour l'√©tat une fois termin√©
    st.session_state.is_running = False


def stop_bot():
    """
    Arr√™te le bot LinkedIn.
    """
    if st.session_state.bot and st.session_state.is_running:
        st.session_state.bot.stop()
        
        # Attendre que le thread se termine
        if st.session_state.bot_thread and st.session_state.bot_thread.is_alive():
            st.session_state.bot_thread.join(timeout=10)
            
        st.session_state.is_running = False
        
        # Fermer le navigateur
        st.session_state.bot.close()
        st.session_state.bot = None


# En-t√™te principal
st.markdown('<div class="main-header">LinkedIn Auto Connector</div>', unsafe_allow_html=True)
st.markdown("""
Agent automatis√© pour envoyer des invitations LinkedIn sans message.
""")

# Sidebar pour les param√®tres et contr√¥les
st.sidebar.markdown('<div class="sub-header">Configuration</div>', unsafe_allow_html=True)

# V√©rification des identifiants LinkedIn
email = config.LINKEDIN_EMAIL
if not email:
    email = st.sidebar.text_input("Email LinkedIn", type="default")
    
password = config.LINKEDIN_PASSWORD
if not password:
    password = st.sidebar.text_input("Mot de passe LinkedIn", type="password")
    
# Crit√®res de recherche
st.sidebar.markdown('<div class="sub-header">Crit√®res de recherche</div>', unsafe_allow_html=True)

sector = st.sidebar.text_input("Secteur d'activit√©", value=config.DEFAULT_SECTOR)
job_title = st.sidebar.text_input("Fonction", value=config.DEFAULT_JOB_TITLE)
location = st.sidebar.text_input("Localisation", value=config.DEFAULT_LOCATION)
connection_level = st.sidebar.selectbox("Niveau de connexion", 
                                      options=["2nd", "3rd"],
                                      index=0 if config.DEFAULT_CONNECTION_LEVEL == "2nd" else 1)

# Options avanc√©es
st.sidebar.markdown('<div class="sub-header">Options avanc√©es</div>', unsafe_allow_html=True)

headless_mode = st.sidebar.checkbox("Mode headless (sans interface graphique)", 
                                  value=config.HEADLESS_MODE)

max_invitations_per_day = st.sidebar.slider("Invitations max. par jour", 
                                          min_value=1, 
                                          max_value=50, 
                                          value=config.MAX_INVITATIONS_PER_DAY)

min_wait_time = st.sidebar.slider("Temps min. entre actions (sec)", 
                                min_value=5, 
                                max_value=30, 
                                value=config.MIN_WAIT_TIME)

max_wait_time = st.sidebar.slider("Temps max. entre actions (sec)", 
                                min_value=10, 
                                max_value=60, 
                                value=config.MAX_WAIT_TIME)

# Boutons d'action
st.sidebar.markdown('<div class="sub-header">Action</div>', unsafe_allow_html=True)

col1, col2 = st.sidebar.columns(2)

with col1:
    if st.button("D√©marrer", disabled=st.session_state.is_running, type="primary"):
        if not sector and not job_title and not location:
            st.sidebar.error("Veuillez sp√©cifier au moins un crit√®re de recherche.")
        elif not email or not password:
            st.sidebar.error("Veuillez fournir vos identifiants LinkedIn.")
        else:
            # Sauvegarder les param√®tres dans les variables d'environnement temporaires
            os.environ["LINKEDIN_EMAIL"] = email
            os.environ["LINKEDIN_PASSWORD"] = password
            os.environ["MAX_INVITATIONS_PER_DAY"] = str(max_invitations_per_day)
            os.environ["MIN_WAIT_TIME"] = str(min_wait_time)
            os.environ["MAX_WAIT_TIME"] = str(max_wait_time)
            
            # Cr√©er et d√©marrer le thread du bot
            st.session_state.bot_thread = threading.Thread(
                target=start_bot_thread,
                args=(sector, job_title, location, connection_level, headless_mode)
            )
            st.session_state.bot_thread.daemon = True
            st.session_state.bot_thread.start()
            
            st.sidebar.success("Bot d√©marr√© avec succ√®s!")
            
with col2:
    if st.button("Arr√™ter", disabled=not st.session_state.is_running, type="secondary"):
        stop_bot()
        st.sidebar.warning("Bot arr√™t√©!")

# Affichage du statut actuel
st.markdown('<div class="sub-header">√âtat actuel</div>', unsafe_allow_html=True)

if st.session_state.is_running:
    st.markdown(f"""
    <div class="bot-running">
        <h3>üü¢ Bot en cours d'ex√©cution</h3>
        <p>Le bot est en train d'envoyer des invitations LinkedIn. Vous pouvez suivre son activit√© ci-dessous.</p>
    </div>
    """, unsafe_allow_html=True)
else:
    st.markdown(f"""
    <div class="bot-stopped">
        <h3>üî¥ Bot arr√™t√©</h3>
        <p>Le bot est actuellement arr√™t√©. Configurez les crit√®res de recherche et cliquez sur "D√©marrer" pour commencer √† envoyer des invitations.</p>
    </div>
    """, unsafe_allow_html=True)

# Tableau de bord avec des statistiques
st.markdown('<div class="sub-header">Tableau de bord</div>', unsafe_allow_html=True)

# Cr√©er deux colonnes pour les statistiques
col1, col2, col3 = st.columns(3)

# Statistiques des invitations
with col1:
    st.markdown("<h3>Invitations</h3>", unsafe_allow_html=True)
    
    # Invitations aujourd'hui
    invitations_today = db.get_invitations_sent_today()
    
    # Invitations cette semaine
    invitations_this_week = db.get_invitations_sent_this_week()
    
    # Afficher les statistiques
    st.metric(label="Invitations aujourd'hui", 
              value=invitations_today,
              delta=f"Max. {max_invitations_per_day}")
    
    st.metric(label="Invitations cette semaine", 
              value=invitations_this_week,
              delta=f"Max. {config.MAX_INVITATIONS_PER_WEEK}")

# Statistiques des sessions
with col2:
    st.markdown("<h3>Sessions r√©centes</h3>", unsafe_allow_html=True)
    
    # R√©cup√©rer les sessions r√©centes
    recent_sessions = db.get_recent_sessions(limit=5)
    
    if recent_sessions:
        # Calculer le total des invitations envoy√©es
        total_invitations = sum(session.invitations_sent for session in recent_sessions)
        
        # Calculer le total des profils visit√©s
        total_profiles = sum(session.profiles_visited for session in recent_sessions)
        
        # Afficher les statistiques
        st.metric(label="Total des invitations", value=total_invitations)
        st.metric(label="Total des profils visit√©s", value=total_profiles)
    else:
        st.info("Aucune session r√©cente trouv√©e")

# Param√®tres de recherche actuels
with col3:
    st.markdown("<h3>Param√®tres actuels</h3>", unsafe_allow_html=True)
    
    current_settings = {
        "Secteur": sector if sector else "Non sp√©cifi√©",
        "Fonction": job_title if job_title else "Non sp√©cifi√©e",
        "Localisation": location if location else "Non sp√©cifi√©e",
        "Niveau de connexion": connection_level,
        "Mode headless": "Activ√©" if headless_mode else "D√©sactiv√©"
    }
    
    for key, value in current_settings.items():
        st.text(f"{key}: {value}")

# Historique des invitations
st.markdown('<div class="sub-header">Historique des invitations r√©centes</div>', unsafe_allow_html=True)

# R√©cup√©rer les invitations r√©centes
recent_invitations = db.get_recent_invitations(limit=50)

if recent_invitations:
    # Convertir en DataFrame pour un affichage plus propre
    invitations_data = []
    
    for invitation in recent_invitations:
        invitations_data.append({
            "Date": invitation.invitation_sent_at.strftime("%Y-%m-%d %H:%M"),
            "Nom": invitation.profile_name,
            "Titre": invitation.profile_title or "-",
            "Entreprise": invitation.profile_company or "-",
            "Localisation": invitation.profile_location or "-",
            "Crit√®res": f"Secteur: {invitation.sector or '-'}, Fonction: {invitation.job_title or '-'}"
        })
    
    df_invitations = pd.DataFrame(invitations_data)
    st.dataframe(df_invitations)
else:
    st.info("Aucune invitation r√©cente trouv√©e")

# Ajout d'un pied de page avec des informations importantes
st.markdown('<div class="sub-header">Informations importantes</div>', unsafe_allow_html=True)
st.markdown("""
<div class="info-box">
<h4>‚ö†Ô∏è Avertissement</h4>
<p>Cet outil est con√ßu pour un usage personnel et √©ducatif. L'utilisation abusive peut entra√Æner des restrictions sur votre compte LinkedIn.</p>

<h4>üîí S√©curit√©</h4>
<p>Vos identifiants LinkedIn sont uniquement stock√©s temporairement en m√©moire et ne sont pas sauvegard√©s. L'utilisation des cookies permet d'√©viter de saisir vos identifiants √† chaque ex√©cution.</p>

<h4>üí° Conseils d'utilisation</h4>
<ul>
<li>Limitez le nombre d'invitations √† moins de 100 par semaine pour √©viter les restrictions.</li>
<li>Variez vos crit√®res de recherche pour diversifier votre r√©seau.</li>
<li>Assurez-vous que le bot ne tourne pas en continu pendant de longues p√©riodes.</li>
</ul>
</div>
""", unsafe_allow_html=True)

# Fonction principale pour le mode d√©veloppement
if __name__ == "__main__":
    # Cette section est ex√©cut√©e uniquement si le script est ex√©cut√© directement
    pass
